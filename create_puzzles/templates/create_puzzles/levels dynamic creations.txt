
        // Generate automated grid based on difficulty
function generateAutomatedGrid() {
    const difficulty = document.getElementById('difficulty').value;
    const equationCount = parseInt(document.getElementById('equationCount').value) || 4;
    const choiceCount = parseInt(document.getElementById('choiceCount').value) || 12;
    
    if (!difficulty) {
        alert('Please select a difficulty level.');
        return;
    }
    
    // Generate grid based on difficulty
    let generatedData;
    switch (difficulty) {
        case '1': // Easy
            generatedData = generateEasyLevel(equationCount, choiceCount);
            break;
        case '2': // Medium
            generatedData = generateMediumLevel(equationCount, choiceCount);
            break;
        case '3': // Hard
            generatedData = generateHardLevel(equationCount, choiceCount);
            break;
        case '4': // Expert
            generatedData = generateExpertLevel(equationCount, choiceCount);
            break;
        default:
            generatedData = generateEasyLevel(equationCount, choiceCount);
    }
    
    // Update grid data, solution, and choices
    gridData = generatedData.grid;
    solutionData = generatedData.solution;
    choices = generatedData.choices;
    
    // Update row and column inputs
    document.getElementById('rowsInput').value = gridData.length;
    document.getElementById('colsInput').value = gridData[0] ? gridData[0].length : 0;
    
    // Render grid and choices
    renderGrid();
    renderChoices();
    
    // Update JSON output
    updateJsonOutput();
    
    alert('Automated grid generated successfully!');
}

// Helper functions
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

function generateChoices(requiredAnswers, visibleNumbers, totalCount, minRange = 1, maxRange = 100) {
    const choices = new Set(requiredAnswers);
    
    // Add visible numbers as distractors
    visibleNumbers.forEach(num => {
        if (choices.size < totalCount) {
            choices.add(num);
        }
    });
    
    // Fill with random numbers
    while (choices.size < totalCount) {
        const randomNum = getRandomInt(minRange, maxRange);
        choices.add(randomNum);
    }
    
    return shuffleArray(Array.from(choices));
}

// Easy Level Structures
function generateEasyLevel(equationCount = 4, choiceCount = 12) {
    const structures = [
        // Structure 1: Classic Cross Pattern
        () => {
            const grid = [
                ["9", "-", null, "=", null, "_", "21", "+", "19", "=", null],
                ["_", "_", "+", "_", "-", "_", "_", "_", "-", "_", "_"],
                ["30", "_", null, "_", null, "-", null, "=", null, "_", "_"],
                ["-", "_", "=", "_", "=", "_", "×", "_", "=", "_", "_"],
                [null, "÷", "7", "=", null, "_", "23", "-", null, "=", null],
                ["=", "_", "_", "_", "_", "_", "=", "_", "_", "_", "-"],
                ["16", "+", null, "=", "37", "_", null, "-", "22", "=", "1"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "="],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "8"]
            ];
            
            const solution = {
                "4,10": 9, "4,8": 14, "2,6": 1, "6,6": 23, "6,2": 21,
                "4,0": 14, "2,8": 5, "0,10": 40, "4,4": 2, "0,2": 1,
                "0,4": 8, "2,4": 6, "2,2": 1
            };
            
            const choices = [9, 1, 21, 2, 40, 14, 8, 6, 23, 1, 5];
            
            return { grid, solution, choices };
        },
        
        // Structure 2: Horizontal Focus
        () => {
            const grid = [
                [null, "+", "5", "=", "12", "_", "18", "-", null, "=", "9"],
                ["_", "_", "-", "_", "_", "_", "_", "_", "+", "_", "_"],
                ["7", "+", null, "=", "15", "_", null, "-", "4", "=", "3"],
                ["_", "_", "=", "_", "_", "_", "=", "_", "_", "_", "_"],
                [null, "-", "3", "=", "4", "_", "20", "+", null, "=", "28"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "=", "_", "_"],
                ["10", "+", null, "=", "18", "_", "25", "-", null, "=", "17"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 7, "0,8": 9, "2,2": 8, "2,6": 7, "4,0": 7,
                "4,8": 8, "6,2": 8, "6,8": 8
            };
            
            const choices = [7, 8, 9, 7, 8, 8, 8, 9, 7, 8, 8, 7];
            
            return { grid, solution, choices };
        },
        
        // Structure 3: Vertical Connections
        () => {
            const grid = [
                [null, "_", "6", "_", null, "_", "14", "_", "9", "_", null],
                ["+", "_", "+", "_", "-", "_", "-", "_", "+", "_", "-"],
                ["8", "_", null, "_", "7", "_", null, "_", "5", "_", "12"],
                ["=", "_", "=", "_", "=", "_", "=", "_", "=", "_", "="],
                [null, "_", "10", "_", null, "_", "20", "_", null, "_", "4"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["15", "_", null, "_", "18", "_", null, "_", "7", "_", "11"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 2, "0,4": 13, "0,10": 5, "2,2": 4, "2,6": 6,
                "4,0": 5, "4,4": 13, "4,8": 16, "6,2": 5, "6,6": 9
            };
            
            const choices = [2, 13, 5, 4, 6, 5, 13, 16, 5, 9, 2, 4];
            
            return { grid, solution, choices };
        },
        
        // Structure 4: Diagonal Pattern
        () => {
            const grid = [
                [null, "_", "_", "_", "12", "-", null, "=", "5", "_", "_"],
                ["_", "8", "+", null, "=", "_", "13", "_", "_", "_", "_"],
                ["_", "_", "_", "7", "_", "9", "-", null, "=", "2", "_"],
                ["_", "_", null, "+", "4", "=", "_", "6", "_", "_", "_"],
                ["15", "-", null, "=", "_", "_", "11", "+", null, "=", "18"],
                ["_", "_", "_", "_", "_", "3", "_", "_", "_", "_", "_"],
                ["_", "_", "20", "-", null, "=", "12", "_", "_", "_", "_"],
                ["_", null, "+", "5", "=", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 7, "0,6": 7, "1,3": 4, "2,7": 7, "3,2": 3,
                "4,2": 8, "4,8": 7, "6,4": 8, "7,1": 9
            };
            
            const choices = [7, 4, 7, 3, 8, 7, 8, 9, 7, 3, 4, 8];
            
            return { grid, solution, choices };
        },
        
        // Structure 5: Mixed Operations Grid
        () => {
            const grid = [
                ["5", "+", null, "=", "11", "_", "9", "-", null, "=", "2"],
                ["_", "_", "×", "_", "_", "_", "_", "_", "÷", "_", "_"],
                [null, "×", "3", "=", "15", "_", "12", "÷", null, "=", "3"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["8", "-", null, "=", "3", "_", "6", "+", null, "=", "14"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                [null, "+", "7", "=", "15", "_", "20", "-", null, "=", "12"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,2": 6, "0,8": 7, "2,0": 5, "2,8": 4, "4,2": 5,
                "4,8": 8, "6,0": 8, "6,8": 8
            };
            
            const choices = [6, 7, 5, 4, 5, 8, 8, 8, 6, 5, 4, 7];
            
            return { grid, solution, choices };
        }
    ];
    
    const selectedStructure = structures[getRandomInt(0, structures.length - 1)];
    return selectedStructure();
}

// Medium Level Structures
function generateMediumLevel(equationCount = 4, choiceCount = 15) {
    const structures = [
        // Structure 1: Classic Medium Grid
        () => {
            const grid = [
                [null, "×", "11", "=", "33", "_", null, "+", "9", "=", "34"],
                ["_", "_", "-", "_", "_", "_", "_", "_", "+", "_", "_"],
                ["_", "_", null, "_", null, "-", "9", "=", null, "_", "_"],
                ["_", "_", "=", "_", "_", "_", "_", "_", "=", "_", "_"],
                ["110", "÷", "5", "=", null, "_", null, "+", null, "=", "18"],
                ["_", "_", "_", "_", "+", "_", "+", "_", "_", "_", "_"],
                ["28", "-", "11", "=", null, "_", null, "×", null, "=", "45"],
                ["_", "_", "_", "_", "=", "_", "=", "_", "_", "_", "_"],
                ["_", "_", "_", "_", null, "+", null, "=", "55", "_", "_"]
            ];
            
            const solution = {
                "0,0": 3, "2,2": 6, "0,6": 25, "4,4": 22, "2,4": 11,
                "2,8": 2, "4,8": 11, "4,6": 7, "6,6": 9, "6,8": 5,
                "8,6": 16, "8,4": 39, "6,4": 17
            };
            
            const choices = [6, 25, 16, 11, 3, 7, 5, 17, 2, 39, 9, 11, 22];
            
            return { grid, solution, choices };
        },
        
        // Structure 2: Multiplication Focus
        () => {
            const grid = [
                [null, "×", "8", "=", "32", "_", "45", "÷", null, "=", "9"],
                ["_", "_", "÷", "_", "_", "_", "_", "_", "×", "_", "_"],
                ["12", "×", null, "=", "60", "_", null, "×", "6", "=", "42"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["72", "÷", null, "=", "8", "_", "7", "×", null, "=", "56"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                [null, "×", "9", "=", "63", "_", "81", "÷", null, "=", "9"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 4, "0,8": 5, "2,2": 5, "2,6": 7, "4,2": 9,
                "4,8": 8, "6,0": 7, "6,8": 9
            };
            
            const choices = [4, 5, 5, 7, 9, 8, 7, 9, 4, 5, 7, 8, 9];
            
            return { grid, solution, choices };
        },
        
        // Structure 3: Cross Pattern with Division
        () => {
            const grid = [
                ["_", "_", null, "_", "24", "÷", null, "=", "6", "_", "_"],
                ["_", "18", "÷", null, "=", "_", "9", "_", "_", "_", "_"],
                [null, "×", "4", "=", "_", "_", "_", "15", "-", null, "="],
                ["_", "_", "_", "_", "_", "7", "_", "_", "_", "8", "_"],
                ["28", "÷", null, "=", "7", "_", null, "+", "13", "=", "20"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "36", "÷", null, "=", "9", "_", "_", "_", "_"],
                ["_", null, "×", "5", "=", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,2": 4, "0,6": 4, "1,3": 3, "2,0": 5, "2,9": 7,
                "4,2": 4, "4,6": 7, "6,4": 4, "7,1": 7
            };
            
            const choices = [4, 3, 5, 7, 4, 7, 4, 7, 4, 3, 5, 7, 4];
            
            return { grid, solution, choices };
        },
        
        // Structure 4: Mixed Operations Web
        () => {
            const grid = [
                [null, "_", "15", "_", "_", "_", "20", "_", null, "_", "_"],
                ["×", "_", "-", "_", "_", "_", "+", "_", "÷", "_", "_"],
                ["3", "_", null, "_", null, "_", null, "_", "5", "_", "_"],
                ["=", "_", "=", "_", "×", "_", "=", "_", "=", "_", "_"],
                [null, "_", "12", "_", null, "_", "18", "_", null, "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["24", "_", null, "_", "30", "_", null, "_", "6", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 5, "0,8": 4, "2,2": 5, "2,4": 4, "2,6": 4,
                "4,0": 2, "4,4": 6, "4,8": 3, "6,2": 4, "6,6": 5
            };
            
            const choices = [5, 4, 5, 4, 4, 2, 6, 3, 4, 5, 5, 4, 6];
            
            return { grid, solution, choices };
        },
        
        // Structure 5: Complex Connections
        () => {
            const grid = [
                ["_", "_", null, "_", "14", "_", "_", "_", "25", "-", null],
                ["_", "6", "×", null, "=", "_", "_", "18", "÷", null, "="],
                [null, "+", "8", "=", "_", "_", null, "×", "3", "=", "21"],
                ["_", "_", "_", "_", "_", "9", "_", "_", "_", "_", "_"],
                ["16", "-", null, "=", "7", "_", "12", "+", null, "=", "20"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "27", "÷", null, "=", "9", "_", "_", "_", "_"],
                ["_", null, "×", "4", "=", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,2": 7, "0,10": 9, "1,3": 7, "1,9": 3, "2,0": 5,
                "2,6": 7, "4,2": 9, "4,8": 8, "6,4": 3, "7,1": 6
            };
            
            const choices = [7, 9, 7, 3, 5, 7, 9, 8, 3, 6, 7, 9, 8];
            
            return { grid, solution, choices };
        }
    ];
    
    const selectedStructure = structures[getRandomInt(0, structures.length - 1)];
    return selectedStructure();
}

// Hard Level Structures
function generateHardLevel(equationCount = 6, choiceCount = 20) {
    const structures = [
        // Structure 1: Classic Hard Grid
        () => {
            const grid = [
                [null, "_", null, "+", "5", "=", null, "_", "_", "_", "_"],
                ["+", "_", "-", "_", "_", "_", "+", "_", "_", "_", "_"],
                ["5", "-", null, "=", null, "_", null, "-", "1", "=", null],
                ["=", "_", "=", "_", "+", "_", "=", "_", "+", "_", "-"],
                ["8", "+", null, "=", null, "_", "39", "-", null, "=", null],
                ["_", "_", "_", "_", "=", "_", "_", "_", "=", "_", "="],
                ["18", "-", null, "=", "12", "_", null, "-", null, "=", null],
                ["_", "_", "-", "_", "_", "_", "-", "_", "_", "_", "_"],
                ["6", "+", null, "=", "11", "_", null, "-", null, "=", "18"],
                ["_", "_", "=", "_", "_", "_", "=", "_", "_", "_", "_"],
                ["_", "_", "1", "+", null, "=", "25", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 3, "10,4": 24, "8,2": 5, "6,2": 6, "2,2": 3,
                "2,4": 2, "4,4": 10, "4,2": 2, "0,2": 5, "0,6": 10,
                "2,6": 29, "2,10": 28, "6,6": 52, "8,6": 27, "8,8": 9,
                "6,8": 32, "6,10": 20, "4,10": 8, "4,8": 31
            };
            
            const choices = [5, 2, 8, 2, 29, 31, 6, 24, 27, 3, 10, 32, 10, 3, 20, 52, 5, 9, 28];
            
            return { grid, solution, choices };
        },
        
        // Structure 2: Complex Web
        () => {
            const grid = [
                ["_", "_", null, "_", "17", "_", "_", "_", null, "_", "42"],
                ["_", "12", "÷", null, "=", "_", "_", "24", "-", null, "="],
                [null, "×", "4", "=", "_", "_", null, "+", "15", "=", "27"],
                ["_", "_", "_", "_", "_", "8", "_", "_", "_", "_", "_"],
                ["35", "-", null, "=", "18", "_", "20", "+", null, "=", "35"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "48", "÷", null, "=", "12", "_", "_", "_", "_"],
                ["_", null, "×", "6", "=", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,2": 3, "0,8": 7, "1,3": 3, "1,9": 17, "2,0": 3,
                "2,6": 12, "4,2": 17, "4,8": 15, "6,4": 4, "7,1": 8
            };
            
            const choices = [3, 7, 3, 17, 3, 12, 17, 15, 4, 8, 3, 7, 12, 15, 4, 8, 17, 3, 12];
            
            return { grid, solution, choices };
        },
        
        // Structure 3: Multi-directional
        () => {
            const grid = [
                [null, "_", "23", "_", "_", "_", "19", "_", null, "_", "_"],
                ["-", "_", "+", "_", "_", "_", "-", "_", "×", "_", "_"],
                ["15", "_", null, "_", null, "_", null, "_", "4", "_", "_"],
                ["=", "_", "=", "_", "÷", "_", "=", "_", "=", "_", "_"],
                [null, "_", "7", "_", null, "_", "32", "_", null, "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["42", "_", null, "_", "56", "_", null, "_", "8", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 8, "0,8": 6, "2,2": 8, "2,4": 5, "2,6": 15,
                "4,0": 9, "4,4": 8, "4,8": 4, "6,2": 6, "6,6": 7
            };
            
            const choices = [8, 6, 8, 5, 15, 9, 8, 4, 6, 7, 8, 6, 5, 15, 9, 8, 4, 6, 7];
            
            return { grid, solution, choices };
        },
        
        // Structure 4: Pyramid Pattern
        () => {
            const grid = [
                ["_", "_", "_", "_", null, "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "18", "-", null, "=", "7", "_", "_", "_"],
                ["_", "_", null, "×", "3", "=", "36", "_", null, "_", "_"],
                ["_", "24", "÷", null, "=", "6", "_", "15", "+", null, "="],
                [null, "+", "9", "=", "_", "_", null, "-", "8", "=", "12"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,4": 11, "1,5": 11, "2,2": 12, "3,3": 4, "3,9": 23,
                "4,0": 3, "4,6": 20
            };
            
            const choices = [11, 11, 12, 4, 23, 3, 20, 11, 12, 4, 23, 3, 20, 11, 12, 4, 23, 3, 20];
            
            return { grid, solution, choices };
        },
        
        // Structure 5: Interconnected Grid
        () => {
            const grid = [
                [null, "_", "25", "_", "_", "_", "14", "_", null, "_", "_"],
                ["÷", "_", "-", "_", "_", "_", "+", "_", "×", "_", "_"],
                ["5", "_", null, "_", null, "_", null, "_", "3", "_", "_"],
                ["=", "_", "=", "_", "×", "_", "=", "_", "=", "_", "_"],
                [null, "_", "8", "_", null, "_", "21", "_", null, "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["32", "_", null, "_", "40", "_", null, "_", "7", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 5, "0,8": 6, "2,2": 17, "2,4": 4, "2,6": 11,
                "4,0": 4, "4,4": 5, "4,8": 3, "6,2": 4, "6,6": 5
            };
            
            const choices = [5, 6, 17, 4, 11, 4, 5, 3, 4, 5, 5, 6, 17, 4, 11, 4, 5, 3, 4, 5];
            
            return { grid, solution, choices };
        }
    ];
    
    const selectedStructure = structures[getRandomInt(0, structures.length - 1)];
    return selectedStructure();
}

// Expert Level Structures
function generateExpertLevel(equationCount = 8, choiceCount = 25) {
    const structures = [
        // Structure 1: Classic Expert Grid
        () => {
            const grid = [
                [null, "_", "22", "_", "_", "_", null, "+", "4", "=", null, "_", "_"],
                ["×", "_", "-", "_", "_", "_", "+", "_", "+", "_", "×", "_", "_"],
                [null, "+", null, "=", null, "_", null, "-", null, "=", null, "_", "_"],
                ["=", "_", "=", "_", "+", "_", "=", "_", "=", "_", "=", "_", "_"],
                ["72", "_", null, "+", null, "=", "29", "_", null, "+", "78", "=", null],
                ["_", "_", "_", "_", "=", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", null, "×", null, "=", "54", "_", "_", "_", null, "_", "_"],
                ["_", "_", "-", "_", "_", "_", "+", "_", "_", "_", "+", "_", "_"],
                ["_", "_", "1", "_", "74", "_", null, "+", "25", "=", "36", "_", "_"],
                ["_", "_", "=", "_", "-", "_", "=", "_", "-", "_", "=", "_", "_"],
                ["_", "_", null, "_", null, "-", null, "=", null, "_", "47", "_", "_"],
                ["_", "_", "_", "_", "=", "_", "_", "_", "=", "_", "_", "_", "_"],
                ["_", "_", "_", "_", null, "+", "16", "=", "23", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 4, "2,0": 18, "6,2": 27, "6,4": 2, "10,2": 26,
                "12,4": 7, "10,4": 67, "10,6": 65, "8,6": 11, "10,8": 2,
                "2,2": 11, "4,2": 11, "4,4": 18, "2,4": 29, "6,10": 11,
                "4,12": 86, "4,8": 8, "2,8": 4, "0,10": 26, "2,10": 3,
                "0,6": 22, "2,6": 7
            };
            
            const choices = [3, 12, 65, 8, 2, 7, 1, 26, 4, 67, 14, 7, 8, 11, 4, 27, 11, 22, 18, 15, 86, 2, 11, 11];
            
            return { grid, solution, choices };
        },
        
        // Structure 2: Multi-operation Web
        () => {
            const grid = [
                ["_", "_", null, "_", "15", "_", "_", "_", null, "_", "35", "_", "_"],
                ["_", "12", "×", null, "=", "_", "_", "24", "÷", null, "=", "_", "_"],
                [null, "+", "8", "=", "_", "_", null, "-", "13", "=", "15", "_", "_"],
                ["_", "_", "_", "_", "_", "6", "_", "_", "_", "_", "_", "_", "_"],
                ["42", "-", null, "=", "25", "_", "18", "+", null, "=", "35", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "56", "÷", null, "=", "14", "_", "_", "_", null, "_", "_"],
                ["_", null, "×", "7", "=", "_", "_", "_", "_", "_", "+", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,2": 3, "0,8": 7, "1,3": 3, "1,9": 4, "2,0": 7,
                "2,6": 28, "4,2": 17, "4,8": 17, "6,4": 4, "7,1": 8,
                "6,10": 21
            };
            
            const choices = [3, 7, 3, 4, 7, 28, 17, 17, 4, 8, 21, 3, 7, 28, 17, 4, 8, 21, 3, 7, 28, 17, 4, 8, 21];
            
            return { grid, solution, choices };
        },
        
        // Structure 3: Complex Cross
        () => {
            const grid = [
                ["_", "_", "_", "_", null, "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "24", "÷", null, "=", "6", "_", "_", "_", "_", "_"],
                ["_", "_", null, "×", "5", "=", "45", "_", null, "_", "_", "_", "_"],
                ["_", "36", "÷", null, "=", "9", "_", "18", "+", null, "=", "_", "_"],
                [null, "+", "12", "=", "_", "_", null, "-", "15", "=", "20", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,4": 12, "1,5": 4, "2,2": 9, "3,3": 4, "3,9": 33,
                "4,0": 8, "4,6": 35
            };
            
            const choices = [12, 4, 9, 4, 33, 8, 35, 12, 4, 9, 4, 33, 8, 35, 12, 4, 9, 4, 33, 8, 35, 12, 4, 9, 4];
            
            return { grid, solution, choices };
        },
        
        // Structure 4: Advanced Pattern
        () => {
            const grid = [
                [null, "_", "28", "_", "_", "_", "19", "_", null, "_", "45", "_", "_"],
                ["÷", "_", "+", "_", "_", "_", "-", "_", "×", "_", "-", "_", "_"],
                ["4", "_", null, "_", null, "_", null, "_", "6", "_", null, "_", "_"],
                ["=", "_", "=", "_", "×", "_", "=", "_", "=", "_", "=", "_", "_"],
                [null, "_", "9", "_", null, "_", "32", "_", null, "_", "27", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["56", "_", null, "_", "63", "_", null, "_", "8", "_", null, "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,0": 7, "0,8": 8, "2,2": 19, "2,4": 5, "2,6": 13,
                "2,10": 39, "4,0": 5, "4,4": 7, "4,8": 5, "6,2": 7,
                "6,6": 9, "6,10": 19
            };
            
            const choices = [7, 8, 19, 5, 13, 39, 5, 7, 5, 7, 9, 19, 7, 8, 19, 5, 13, 39, 5, 7, 5, 7, 9, 19, 7];
            
            return { grid, solution, choices };
        },
        
        // Structure 5: Master Grid
        () => {
            const grid = [
                ["_", "_", "_", "_", null, "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "32", "÷", null, "=", "8", "_", "_", "_", "_", "_"],
                ["_", "_", null, "×", "6", "=", "54", "_", null, "_", "_", "_", "_"],
                ["_", "48", "÷", null, "=", "12", "_", "24", "+", null, "=", "_", "_"],
                [null, "+", "16", "=", "_", "_", null, "-", "18", "=", "25", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"],
                ["_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"]
            ];
            
            const solution = {
                "0,4": 16, "1,5": 4, "2,2": 9, "3,3": 4, "3,9": 36,
                "4,0": 9, "4,6": 43
            };
            
            const choices = [16, 4, 9, 4, 36, 9, 43, 16, 4, 9, 4, 36, 9, 43, 16, 4, 9, 4, 36, 9, 43, 16, 4, 9, 4];
            
            return { grid, solution, choices };
        }
    ];
    
    const selectedStructure = structures[getRandomInt(0, structures.length - 1)];
    return selectedStructure();
}
        
